spring.application.name=reservacion-citas
server.servlet.context-path=/api

## Configuración para la BD
# Url de la base de datos usando JDBC, la base de datos es en base al que se crea
# en el docker-compose (puedes cambiarlo si quieres).
spring.datasource.url=jdbc:postgresql://localhost:5432/reservacion_citas
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.open-in-view=false

##Credenciales de Calendly
calendly.api.url=https://api.calendly.com/
calendly.token=${PersonalAccessToken}
calendly.org.url=${UrlOrganizationInCalendly}}
calendly.user.url=${UrlUserInCalendly}
calendly.scope=user

##Endpoint para manejar webhook, evento: invitee.created de Calendly, este debe de ser una URL Pública
calendly.url.webhook.invitee.created=${UrlPublico}/api/webhooks/calendars/invitee_created

## Configuración para el servicio de emails
spring.mail.host=smtp.gmail.com
spring.mail.port=587
# Tu correo electrónico va acá
spring.mail.username=${TuCorreoElectrónico}
# Tu contraseña va acá, si tienes el doble factor de autenticación,
# añade una contraseña de aplicación en tu cuenta.
spring.mail.password=${TuContraseña}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

## Configuracion para el JWT
jwt.secret=${TuSecretJWT}
jwt.issuer=${ElQueProveeElToken}

## Configuración para la autenticación con oAuth2.0
spring.security.oauth2.client.registration.google.client-id=${TuGoogleClientId}
spring.security.oauth2.client.registration.google.client-secret=${TuGoogleClientSecret}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

## Configuración de Paypal
paypal.client-id={TuPaypalClientId}
paypal.client-secret={TuPapalClientSecret}